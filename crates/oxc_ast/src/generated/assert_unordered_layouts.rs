// Auto-generated code, DO NOT EDIT DIRECTLY!
// To edit this generated file you have to edit `tasks/ast_codegen/src/generators/assert_layouts.rs`

use crate::ast::*;

#[cfg(target_pointer_width = "64")]
const _: () = {
    assert!(size_of::<BooleanLiteral>() == 12usize);
    assert!(align_of::<BooleanLiteral>() == 4usize);
    assert!(size_of::<NullLiteral>() == 8usize);
    assert!(align_of::<NullLiteral>() == 4usize);
    assert!(size_of::<NumericLiteral<'static>>() == 40usize);
    assert!(align_of::<NumericLiteral<'static>>() == 8usize);
    assert!(size_of::<BigIntLiteral<'static>>() == 32usize);
    assert!(align_of::<BigIntLiteral<'static>>() == 8usize);
    assert!(size_of::<RegExpLiteral<'static>>() == 32usize);
    assert!(align_of::<RegExpLiteral<'static>>() == 8usize);
    assert!(size_of::<RegExp<'static>>() == 24usize);
    assert!(align_of::<RegExp<'static>>() == 8usize);
    assert!(size_of::<EmptyObject>() == 0usize);
    assert!(align_of::<EmptyObject>() == 1usize);
    assert!(size_of::<StringLiteral<'static>>() == 24usize);
    assert!(align_of::<StringLiteral<'static>>() == 8usize);
    assert!(size_of::<Program<'static>>() == 112usize);
    assert!(align_of::<Program<'static>>() == 8usize);
    assert!(size_of::<Expression<'static>>() == 16usize);
    assert!(align_of::<Expression<'static>>() == 8usize);
    assert!(size_of::<IdentifierName<'static>>() == 24usize);
    assert!(align_of::<IdentifierName<'static>>() == 8usize);
    assert!(size_of::<IdentifierReference<'static>>() == 32usize);
    assert!(align_of::<IdentifierReference<'static>>() == 8usize);
    assert!(size_of::<BindingIdentifier<'static>>() == 32usize);
    assert!(align_of::<BindingIdentifier<'static>>() == 8usize);
    assert!(size_of::<LabelIdentifier<'static>>() == 24usize);
    assert!(align_of::<LabelIdentifier<'static>>() == 8usize);
    assert!(size_of::<ThisExpression>() == 8usize);
    assert!(align_of::<ThisExpression>() == 4usize);
    assert!(size_of::<ArrayExpression<'static>>() == 56usize);
    assert!(align_of::<ArrayExpression<'static>>() == 8usize);
    assert!(size_of::<ArrayExpressionElement<'static>>() == 16usize);
    assert!(align_of::<ArrayExpressionElement<'static>>() == 8usize);
    assert!(size_of::<Elision>() == 8usize);
    assert!(align_of::<Elision>() == 4usize);
    assert!(size_of::<ObjectExpression<'static>>() == 56usize);
    assert!(align_of::<ObjectExpression<'static>>() == 8usize);
    assert!(size_of::<ObjectPropertyKind<'static>>() == 16usize);
    assert!(align_of::<ObjectPropertyKind<'static>>() == 8usize);
    assert!(size_of::<ObjectProperty<'static>>() == 72usize);
    assert!(align_of::<ObjectProperty<'static>>() == 8usize);
    assert!(size_of::<PropertyKey<'static>>() == 16usize);
    assert!(align_of::<PropertyKey<'static>>() == 8usize);
    assert!(size_of::<PropertyKind>() == 4usize);
    assert!(align_of::<PropertyKind>() == 4usize);
    assert!(size_of::<TemplateLiteral<'static>>() == 72usize);
    assert!(align_of::<TemplateLiteral<'static>>() == 8usize);
    assert!(size_of::<TaggedTemplateExpression<'static>>() == 104usize);
    assert!(align_of::<TaggedTemplateExpression<'static>>() == 8usize);
    assert!(size_of::<TemplateElement<'static>>() == 48usize);
    assert!(align_of::<TemplateElement<'static>>() == 8usize);
    assert!(size_of::<TemplateElementValue<'static>>() == 32usize);
    assert!(align_of::<TemplateElementValue<'static>>() == 8usize);
    assert!(size_of::<MemberExpression<'static>>() == 16usize);
    assert!(align_of::<MemberExpression<'static>>() == 8usize);
    assert!(size_of::<ComputedMemberExpression<'static>>() == 48usize);
    assert!(align_of::<ComputedMemberExpression<'static>>() == 8usize);
    assert!(size_of::<StaticMemberExpression<'static>>() == 56usize);
    assert!(align_of::<StaticMemberExpression<'static>>() == 8usize);
    assert!(size_of::<PrivateFieldExpression<'static>>() == 56usize);
    assert!(align_of::<PrivateFieldExpression<'static>>() == 8usize);
    assert!(size_of::<CallExpression<'static>>() == 72usize);
    assert!(align_of::<CallExpression<'static>>() == 8usize);
    assert!(size_of::<NewExpression<'static>>() == 64usize);
    assert!(align_of::<NewExpression<'static>>() == 8usize);
    assert!(size_of::<MetaProperty<'static>>() == 56usize);
    assert!(align_of::<MetaProperty<'static>>() == 8usize);
    assert!(size_of::<SpreadElement<'static>>() == 24usize);
    assert!(align_of::<SpreadElement<'static>>() == 8usize);
    assert!(size_of::<Argument<'static>>() == 16usize);
    assert!(align_of::<Argument<'static>>() == 8usize);
    assert!(size_of::<UpdateExpression<'static>>() == 32usize);
    assert!(align_of::<UpdateExpression<'static>>() == 8usize);
    assert!(size_of::<UnaryExpression<'static>>() == 32usize);
    assert!(align_of::<UnaryExpression<'static>>() == 8usize);
    assert!(size_of::<BinaryExpression<'static>>() == 48usize);
    assert!(align_of::<BinaryExpression<'static>>() == 8usize);
    assert!(size_of::<PrivateInExpression<'static>>() == 56usize);
    assert!(align_of::<PrivateInExpression<'static>>() == 8usize);
    assert!(size_of::<LogicalExpression<'static>>() == 48usize);
    assert!(align_of::<LogicalExpression<'static>>() == 8usize);
    assert!(size_of::<ConditionalExpression<'static>>() == 56usize);
    assert!(align_of::<ConditionalExpression<'static>>() == 8usize);
    assert!(size_of::<AssignmentExpression<'static>>() == 48usize);
    assert!(align_of::<AssignmentExpression<'static>>() == 8usize);
    assert!(size_of::<AssignmentTarget<'static>>() == 16usize);
    assert!(align_of::<AssignmentTarget<'static>>() == 8usize);
    assert!(size_of::<SimpleAssignmentTarget<'static>>() == 16usize);
    assert!(align_of::<SimpleAssignmentTarget<'static>>() == 8usize);
    assert!(size_of::<AssignmentTargetPattern<'static>>() == 16usize);
    assert!(align_of::<AssignmentTargetPattern<'static>>() == 8usize);
    assert!(size_of::<ArrayAssignmentTarget<'static>>() == 80usize);
    assert!(align_of::<ArrayAssignmentTarget<'static>>() == 8usize);
    assert!(size_of::<ObjectAssignmentTarget<'static>>() == 64usize);
    assert!(align_of::<ObjectAssignmentTarget<'static>>() == 8usize);
    assert!(size_of::<AssignmentTargetRest<'static>>() == 24usize);
    assert!(align_of::<AssignmentTargetRest<'static>>() == 8usize);
    assert!(size_of::<AssignmentTargetMaybeDefault<'static>>() == 16usize);
    assert!(align_of::<AssignmentTargetMaybeDefault<'static>>() == 8usize);
    assert!(size_of::<AssignmentTargetWithDefault<'static>>() == 40usize);
    assert!(align_of::<AssignmentTargetWithDefault<'static>>() == 8usize);
    assert!(size_of::<AssignmentTargetProperty<'static>>() == 16usize);
    assert!(align_of::<AssignmentTargetProperty<'static>>() == 8usize);
    assert!(size_of::<AssignmentTargetPropertyIdentifier<'static>>() == 56usize);
    assert!(align_of::<AssignmentTargetPropertyIdentifier<'static>>() == 8usize);
    assert!(size_of::<AssignmentTargetPropertyProperty<'static>>() == 40usize);
    assert!(align_of::<AssignmentTargetPropertyProperty<'static>>() == 8usize);
    assert!(size_of::<SequenceExpression<'static>>() == 40usize);
    assert!(align_of::<SequenceExpression<'static>>() == 8usize);
    assert!(size_of::<Super>() == 8usize);
    assert!(align_of::<Super>() == 4usize);
    assert!(size_of::<AwaitExpression<'static>>() == 24usize);
    assert!(align_of::<AwaitExpression<'static>>() == 8usize);
    assert!(size_of::<ChainExpression<'static>>() == 24usize);
    assert!(align_of::<ChainExpression<'static>>() == 8usize);
    assert!(size_of::<ChainElement<'static>>() == 16usize);
    assert!(align_of::<ChainElement<'static>>() == 8usize);
    assert!(size_of::<ParenthesizedExpression<'static>>() == 24usize);
    assert!(align_of::<ParenthesizedExpression<'static>>() == 8usize);
    assert!(size_of::<Statement<'static>>() == 16usize);
    assert!(align_of::<Statement<'static>>() == 8usize);
    assert!(size_of::<Directive<'static>>() == 48usize);
    assert!(align_of::<Directive<'static>>() == 8usize);
    assert!(size_of::<Hashbang<'static>>() == 24usize);
    assert!(align_of::<Hashbang<'static>>() == 8usize);
    assert!(size_of::<BlockStatement<'static>>() == 48usize);
    assert!(align_of::<BlockStatement<'static>>() == 8usize);
    assert!(size_of::<Declaration<'static>>() == 16usize);
    assert!(align_of::<Declaration<'static>>() == 8usize);
    assert!(size_of::<VariableDeclaration<'static>>() == 56usize);
    assert!(align_of::<VariableDeclaration<'static>>() == 8usize);
    assert!(size_of::<VariableDeclarationKind>() == 4usize);
    assert!(align_of::<VariableDeclarationKind>() == 4usize);
    assert!(size_of::<VariableDeclarator<'static>>() == 72usize);
    assert!(align_of::<VariableDeclarator<'static>>() == 8usize);
    assert!(size_of::<UsingDeclaration<'static>>() == 48usize);
    assert!(align_of::<UsingDeclaration<'static>>() == 8usize);
    assert!(size_of::<EmptyStatement>() == 8usize);
    assert!(align_of::<EmptyStatement>() == 4usize);
    assert!(size_of::<ExpressionStatement<'static>>() == 24usize);
    assert!(align_of::<ExpressionStatement<'static>>() == 8usize);
    assert!(size_of::<IfStatement<'static>>() == 56usize);
    assert!(align_of::<IfStatement<'static>>() == 8usize);
    assert!(size_of::<DoWhileStatement<'static>>() == 40usize);
    assert!(align_of::<DoWhileStatement<'static>>() == 8usize);
    assert!(size_of::<WhileStatement<'static>>() == 40usize);
    assert!(align_of::<WhileStatement<'static>>() == 8usize);
    assert!(size_of::<ForStatement<'static>>() == 80usize);
    assert!(align_of::<ForStatement<'static>>() == 8usize);
    assert!(size_of::<ForStatementInit<'static>>() == 16usize);
    assert!(align_of::<ForStatementInit<'static>>() == 8usize);
    assert!(size_of::<ForInStatement<'static>>() == 64usize);
    assert!(align_of::<ForInStatement<'static>>() == 8usize);
    assert!(size_of::<ForStatementLeft<'static>>() == 16usize);
    assert!(align_of::<ForStatementLeft<'static>>() == 8usize);
    assert!(size_of::<ForOfStatement<'static>>() == 72usize);
    assert!(align_of::<ForOfStatement<'static>>() == 8usize);
    assert!(size_of::<ContinueStatement<'static>>() == 32usize);
    assert!(align_of::<ContinueStatement<'static>>() == 8usize);
    assert!(size_of::<BreakStatement<'static>>() == 32usize);
    assert!(align_of::<BreakStatement<'static>>() == 8usize);
    assert!(size_of::<ReturnStatement<'static>>() == 24usize);
    assert!(align_of::<ReturnStatement<'static>>() == 8usize);
    assert!(size_of::<WithStatement<'static>>() == 40usize);
    assert!(align_of::<WithStatement<'static>>() == 8usize);
    assert!(size_of::<SwitchStatement<'static>>() == 64usize);
    assert!(align_of::<SwitchStatement<'static>>() == 8usize);
    assert!(size_of::<SwitchCase<'static>>() == 56usize);
    assert!(align_of::<SwitchCase<'static>>() == 8usize);
    assert!(size_of::<LabeledStatement<'static>>() == 48usize);
    assert!(align_of::<LabeledStatement<'static>>() == 8usize);
    assert!(size_of::<ThrowStatement<'static>>() == 24usize);
    assert!(align_of::<ThrowStatement<'static>>() == 8usize);
    assert!(size_of::<TryStatement<'static>>() == 32usize);
    assert!(align_of::<TryStatement<'static>>() == 8usize);
    assert!(size_of::<CatchClause<'static>>() == 64usize);
    assert!(align_of::<CatchClause<'static>>() == 8usize);
    assert!(size_of::<CatchParameter<'static>>() == 40usize);
    assert!(align_of::<CatchParameter<'static>>() == 8usize);
    assert!(size_of::<DebuggerStatement>() == 8usize);
    assert!(align_of::<DebuggerStatement>() == 4usize);
    assert!(size_of::<BindingPattern<'static>>() == 32usize);
    assert!(align_of::<BindingPattern<'static>>() == 8usize);
    assert!(size_of::<BindingPatternKind<'static>>() == 16usize);
    assert!(align_of::<BindingPatternKind<'static>>() == 8usize);
    assert!(size_of::<AssignmentPattern<'static>>() == 56usize);
    assert!(align_of::<AssignmentPattern<'static>>() == 8usize);
    assert!(size_of::<ObjectPattern<'static>>() == 48usize);
    assert!(align_of::<ObjectPattern<'static>>() == 8usize);
    assert!(size_of::<BindingProperty<'static>>() == 64usize);
    assert!(align_of::<BindingProperty<'static>>() == 8usize);
    assert!(size_of::<ArrayPattern<'static>>() == 48usize);
    assert!(align_of::<ArrayPattern<'static>>() == 8usize);
    assert!(size_of::<BindingRestElement<'static>>() == 40usize);
    assert!(align_of::<BindingRestElement<'static>>() == 8usize);
    assert!(size_of::<Function<'static>>() == 136usize);
    assert!(align_of::<Function<'static>>() == 8usize);
    assert!(size_of::<FunctionType>() == 4usize);
    assert!(align_of::<FunctionType>() == 4usize);
    assert!(size_of::<FormalParameters<'static>>() == 56usize);
    assert!(align_of::<FormalParameters<'static>>() == 8usize);
    assert!(size_of::<FormalParameter<'static>>() == 80usize);
    assert!(align_of::<FormalParameter<'static>>() == 8usize);
    assert!(size_of::<FormalParameterKind>() == 4usize);
    assert!(align_of::<FormalParameterKind>() == 4usize);
    assert!(size_of::<FunctionBody<'static>>() == 72usize);
    assert!(align_of::<FunctionBody<'static>>() == 8usize);
    assert!(size_of::<ArrowFunctionExpression<'static>>() == 56usize);
    assert!(align_of::<ArrowFunctionExpression<'static>>() == 8usize);
    assert!(size_of::<YieldExpression<'static>>() == 32usize);
    assert!(align_of::<YieldExpression<'static>>() == 8usize);
    assert!(size_of::<Class<'static>>() == 160usize);
    assert!(align_of::<Class<'static>>() == 8usize);
    assert!(size_of::<ClassType>() == 4usize);
    assert!(align_of::<ClassType>() == 4usize);
    assert!(size_of::<ClassBody<'static>>() == 40usize);
    assert!(align_of::<ClassBody<'static>>() == 8usize);
    assert!(size_of::<ClassElement<'static>>() == 16usize);
    assert!(align_of::<ClassElement<'static>>() == 8usize);
    assert!(size_of::<MethodDefinition<'static>>() == 88usize);
    assert!(align_of::<MethodDefinition<'static>>() == 8usize);
    assert!(size_of::<MethodDefinitionType>() == 4usize);
    assert!(align_of::<MethodDefinitionType>() == 4usize);
    assert!(size_of::<PropertyDefinition<'static>>() == 104usize);
    assert!(align_of::<PropertyDefinition<'static>>() == 8usize);
    assert!(size_of::<PropertyDefinitionType>() == 4usize);
    assert!(align_of::<PropertyDefinitionType>() == 4usize);
    assert!(size_of::<MethodDefinitionKind>() == 4usize);
    assert!(align_of::<MethodDefinitionKind>() == 4usize);
    assert!(size_of::<PrivateIdentifier<'static>>() == 24usize);
    assert!(align_of::<PrivateIdentifier<'static>>() == 8usize);
    assert!(size_of::<StaticBlock<'static>>() == 48usize);
    assert!(align_of::<StaticBlock<'static>>() == 8usize);
    assert!(size_of::<ModuleDeclaration<'static>>() == 16usize);
    assert!(align_of::<ModuleDeclaration<'static>>() == 8usize);
    assert!(size_of::<AccessorPropertyType>() == 4usize);
    assert!(align_of::<AccessorPropertyType>() == 4usize);
    assert!(size_of::<AccessorProperty<'static>>() == 88usize);
    assert!(align_of::<AccessorProperty<'static>>() == 8usize);
    assert!(size_of::<ImportExpression<'static>>() == 56usize);
    assert!(align_of::<ImportExpression<'static>>() == 8usize);
    assert!(size_of::<ImportDeclaration<'static>>() == 136usize);
    assert!(align_of::<ImportDeclaration<'static>>() == 8usize);
    assert!(size_of::<ImportDeclarationSpecifier<'static>>() == 16usize);
    assert!(align_of::<ImportDeclarationSpecifier<'static>>() == 8usize);
    assert!(size_of::<ImportSpecifier<'static>>() == 88usize);
    assert!(align_of::<ImportSpecifier<'static>>() == 8usize);
    assert!(size_of::<ImportDefaultSpecifier<'static>>() == 40usize);
    assert!(align_of::<ImportDefaultSpecifier<'static>>() == 8usize);
    assert!(size_of::<ImportNamespaceSpecifier<'static>>() == 40usize);
    assert!(align_of::<ImportNamespaceSpecifier<'static>>() == 8usize);
    assert!(size_of::<WithClause<'static>>() == 64usize);
    assert!(align_of::<WithClause<'static>>() == 8usize);
    assert!(size_of::<ImportAttribute<'static>>() == 64usize);
    assert!(align_of::<ImportAttribute<'static>>() == 8usize);
    assert!(size_of::<ImportAttributeKey<'static>>() == 32usize);
    assert!(align_of::<ImportAttributeKey<'static>>() == 8usize);
    assert!(size_of::<ExportNamedDeclaration<'static>>() == 152usize);
    assert!(align_of::<ExportNamedDeclaration<'static>>() == 8usize);
    assert!(size_of::<ExportDefaultDeclaration<'static>>() == 64usize);
    assert!(align_of::<ExportDefaultDeclaration<'static>>() == 8usize);
    assert!(size_of::<ExportAllDeclaration<'static>>() == 144usize);
    assert!(align_of::<ExportAllDeclaration<'static>>() == 8usize);
    assert!(size_of::<ExportSpecifier<'static>>() == 96usize);
    assert!(align_of::<ExportSpecifier<'static>>() == 8usize);
    assert!(size_of::<ExportDefaultDeclarationKind<'static>>() == 16usize);
    assert!(align_of::<ExportDefaultDeclarationKind<'static>>() == 8usize);
    assert!(size_of::<ModuleExportName<'static>>() == 40usize);
    assert!(align_of::<ModuleExportName<'static>>() == 8usize);
    assert!(size_of::<TSThisParameter<'static>>() == 40usize);
    assert!(align_of::<TSThisParameter<'static>>() == 8usize);
    assert!(size_of::<TSEnumDeclaration<'static>>() == 80usize);
    assert!(align_of::<TSEnumDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSEnumMember<'static>>() == 40usize);
    assert!(align_of::<TSEnumMember<'static>>() == 8usize);
    assert!(size_of::<TSEnumMemberName<'static>>() == 16usize);
    assert!(align_of::<TSEnumMemberName<'static>>() == 8usize);
    assert!(size_of::<TSTypeAnnotation<'static>>() == 24usize);
    assert!(align_of::<TSTypeAnnotation<'static>>() == 8usize);
    assert!(size_of::<TSLiteralType<'static>>() == 24usize);
    assert!(align_of::<TSLiteralType<'static>>() == 8usize);
    assert!(size_of::<TSLiteral<'static>>() == 16usize);
    assert!(align_of::<TSLiteral<'static>>() == 8usize);
    assert!(size_of::<TSType<'static>>() == 16usize);
    assert!(align_of::<TSType<'static>>() == 8usize);
    assert!(size_of::<TSConditionalType<'static>>() == 80usize);
    assert!(align_of::<TSConditionalType<'static>>() == 8usize);
    assert!(size_of::<TSUnionType<'static>>() == 40usize);
    assert!(align_of::<TSUnionType<'static>>() == 8usize);
    assert!(size_of::<TSIntersectionType<'static>>() == 40usize);
    assert!(align_of::<TSIntersectionType<'static>>() == 8usize);
    assert!(size_of::<TSParenthesizedType<'static>>() == 24usize);
    assert!(align_of::<TSParenthesizedType<'static>>() == 8usize);
    assert!(size_of::<TSTypeOperator<'static>>() == 32usize);
    assert!(align_of::<TSTypeOperator<'static>>() == 8usize);
    assert!(size_of::<TSTypeOperatorOperator>() == 4usize);
    assert!(align_of::<TSTypeOperatorOperator>() == 4usize);
    assert!(size_of::<TSArrayType<'static>>() == 24usize);
    assert!(align_of::<TSArrayType<'static>>() == 8usize);
    assert!(size_of::<TSIndexedAccessType<'static>>() == 40usize);
    assert!(align_of::<TSIndexedAccessType<'static>>() == 8usize);
    assert!(size_of::<TSTupleType<'static>>() == 40usize);
    assert!(align_of::<TSTupleType<'static>>() == 8usize);
    assert!(size_of::<TSNamedTupleMember<'static>>() == 56usize);
    assert!(align_of::<TSNamedTupleMember<'static>>() == 8usize);
    assert!(size_of::<TSOptionalType<'static>>() == 24usize);
    assert!(align_of::<TSOptionalType<'static>>() == 8usize);
    assert!(size_of::<TSRestType<'static>>() == 24usize);
    assert!(align_of::<TSRestType<'static>>() == 8usize);
    assert!(size_of::<TSTupleElement<'static>>() == 16usize);
    assert!(align_of::<TSTupleElement<'static>>() == 8usize);
    assert!(size_of::<TSAnyKeyword>() == 8usize);
    assert!(align_of::<TSAnyKeyword>() == 4usize);
    assert!(size_of::<TSStringKeyword>() == 8usize);
    assert!(align_of::<TSStringKeyword>() == 4usize);
    assert!(size_of::<TSBooleanKeyword>() == 8usize);
    assert!(align_of::<TSBooleanKeyword>() == 4usize);
    assert!(size_of::<TSNumberKeyword>() == 8usize);
    assert!(align_of::<TSNumberKeyword>() == 4usize);
    assert!(size_of::<TSNeverKeyword>() == 8usize);
    assert!(align_of::<TSNeverKeyword>() == 4usize);
    assert!(size_of::<TSIntrinsicKeyword>() == 8usize);
    assert!(align_of::<TSIntrinsicKeyword>() == 4usize);
    assert!(size_of::<TSUnknownKeyword>() == 8usize);
    assert!(align_of::<TSUnknownKeyword>() == 4usize);
    assert!(size_of::<TSNullKeyword>() == 8usize);
    assert!(align_of::<TSNullKeyword>() == 4usize);
    assert!(size_of::<TSUndefinedKeyword>() == 8usize);
    assert!(align_of::<TSUndefinedKeyword>() == 4usize);
    assert!(size_of::<TSVoidKeyword>() == 8usize);
    assert!(align_of::<TSVoidKeyword>() == 4usize);
    assert!(size_of::<TSSymbolKeyword>() == 8usize);
    assert!(align_of::<TSSymbolKeyword>() == 4usize);
    assert!(size_of::<TSThisType>() == 8usize);
    assert!(align_of::<TSThisType>() == 4usize);
    assert!(size_of::<TSObjectKeyword>() == 8usize);
    assert!(align_of::<TSObjectKeyword>() == 4usize);
    assert!(size_of::<TSBigIntKeyword>() == 8usize);
    assert!(align_of::<TSBigIntKeyword>() == 4usize);
    assert!(size_of::<TSTypeReference<'static>>() == 32usize);
    assert!(align_of::<TSTypeReference<'static>>() == 8usize);
    assert!(size_of::<TSTypeName<'static>>() == 16usize);
    assert!(align_of::<TSTypeName<'static>>() == 8usize);
    assert!(size_of::<TSQualifiedName<'static>>() == 48usize);
    assert!(align_of::<TSQualifiedName<'static>>() == 8usize);
    assert!(size_of::<TSTypeParameterInstantiation<'static>>() == 40usize);
    assert!(align_of::<TSTypeParameterInstantiation<'static>>() == 8usize);
    assert!(size_of::<TSTypeParameter<'static>>() == 80usize);
    assert!(align_of::<TSTypeParameter<'static>>() == 8usize);
    assert!(size_of::<TSTypeParameterDeclaration<'static>>() == 40usize);
    assert!(align_of::<TSTypeParameterDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSTypeAliasDeclaration<'static>>() == 72usize);
    assert!(align_of::<TSTypeAliasDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSAccessibility>() == 4usize);
    assert!(align_of::<TSAccessibility>() == 4usize);
    assert!(size_of::<TSClassImplements<'static>>() == 32usize);
    assert!(align_of::<TSClassImplements<'static>>() == 8usize);
    assert!(size_of::<TSInterfaceDeclaration<'static>>() == 96usize);
    assert!(align_of::<TSInterfaceDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSInterfaceBody<'static>>() == 40usize);
    assert!(align_of::<TSInterfaceBody<'static>>() == 8usize);
    assert!(size_of::<TSPropertySignature<'static>>() == 40usize);
    assert!(align_of::<TSPropertySignature<'static>>() == 8usize);
    assert!(size_of::<TSSignature<'static>>() == 16usize);
    assert!(align_of::<TSSignature<'static>>() == 8usize);
    assert!(size_of::<TSIndexSignature<'static>>() == 56usize);
    assert!(align_of::<TSIndexSignature<'static>>() == 8usize);
    assert!(size_of::<TSCallSignatureDeclaration<'static>>() == 72usize);
    assert!(align_of::<TSCallSignatureDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSMethodSignatureKind>() == 4usize);
    assert!(align_of::<TSMethodSignatureKind>() == 4usize);
    assert!(size_of::<TSMethodSignature<'static>>() == 104usize);
    assert!(align_of::<TSMethodSignature<'static>>() == 8usize);
    assert!(size_of::<TSConstructSignatureDeclaration<'static>>() == 40usize);
    assert!(align_of::<TSConstructSignatureDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSIndexSignatureName<'static>>() == 32usize);
    assert!(align_of::<TSIndexSignatureName<'static>>() == 8usize);
    assert!(size_of::<TSInterfaceHeritage<'static>>() == 32usize);
    assert!(align_of::<TSInterfaceHeritage<'static>>() == 8usize);
    assert!(size_of::<TSTypePredicate<'static>>() == 40usize);
    assert!(align_of::<TSTypePredicate<'static>>() == 8usize);
    assert!(size_of::<TSTypePredicateName<'static>>() == 16usize);
    assert!(align_of::<TSTypePredicateName<'static>>() == 8usize);
    assert!(size_of::<TSModuleDeclaration<'static>>() == 72usize);
    assert!(align_of::<TSModuleDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSModuleDeclarationKind>() == 4usize);
    assert!(align_of::<TSModuleDeclarationKind>() == 4usize);
    assert!(size_of::<TSModuleDeclarationName<'static>>() == 32usize);
    assert!(align_of::<TSModuleDeclarationName<'static>>() == 8usize);
    assert!(size_of::<TSModuleDeclarationBody<'static>>() == 16usize);
    assert!(align_of::<TSModuleDeclarationBody<'static>>() == 8usize);
    assert!(size_of::<TSModuleBlock<'static>>() == 72usize);
    assert!(align_of::<TSModuleBlock<'static>>() == 8usize);
    assert!(size_of::<TSTypeLiteral<'static>>() == 40usize);
    assert!(align_of::<TSTypeLiteral<'static>>() == 8usize);
    assert!(size_of::<TSInferType<'static>>() == 16usize);
    assert!(align_of::<TSInferType<'static>>() == 8usize);
    assert!(size_of::<TSTypeQuery<'static>>() == 32usize);
    assert!(align_of::<TSTypeQuery<'static>>() == 8usize);
    assert!(size_of::<TSTypeQueryExprName<'static>>() == 16usize);
    assert!(align_of::<TSTypeQueryExprName<'static>>() == 8usize);
    assert!(size_of::<TSImportType<'static>>() == 96usize);
    assert!(align_of::<TSImportType<'static>>() == 8usize);
    assert!(size_of::<TSImportAttributes<'static>>() == 40usize);
    assert!(align_of::<TSImportAttributes<'static>>() == 8usize);
    assert!(size_of::<TSImportAttribute<'static>>() == 56usize);
    assert!(align_of::<TSImportAttribute<'static>>() == 8usize);
    assert!(size_of::<TSImportAttributeName<'static>>() == 32usize);
    assert!(align_of::<TSImportAttributeName<'static>>() == 8usize);
    assert!(size_of::<TSFunctionType<'static>>() == 72usize);
    assert!(align_of::<TSFunctionType<'static>>() == 8usize);
    assert!(size_of::<TSConstructorType<'static>>() == 40usize);
    assert!(align_of::<TSConstructorType<'static>>() == 8usize);
    assert!(size_of::<TSMappedType<'static>>() == 64usize);
    assert!(align_of::<TSMappedType<'static>>() == 8usize);
    assert!(size_of::<TSMappedTypeModifierOperator>() == 4usize);
    assert!(align_of::<TSMappedTypeModifierOperator>() == 4usize);
    assert!(size_of::<TSTemplateLiteralType<'static>>() == 72usize);
    assert!(align_of::<TSTemplateLiteralType<'static>>() == 8usize);
    assert!(size_of::<TSAsExpression<'static>>() == 40usize);
    assert!(align_of::<TSAsExpression<'static>>() == 8usize);
    assert!(size_of::<TSSatisfiesExpression<'static>>() == 40usize);
    assert!(align_of::<TSSatisfiesExpression<'static>>() == 8usize);
    assert!(size_of::<TSTypeAssertion<'static>>() == 40usize);
    assert!(align_of::<TSTypeAssertion<'static>>() == 8usize);
    assert!(size_of::<TSImportEqualsDeclaration<'static>>() == 64usize);
    assert!(align_of::<TSImportEqualsDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSModuleReference<'static>>() == 16usize);
    assert!(align_of::<TSModuleReference<'static>>() == 8usize);
    assert!(size_of::<TSExternalModuleReference<'static>>() == 32usize);
    assert!(align_of::<TSExternalModuleReference<'static>>() == 8usize);
    assert!(size_of::<TSNonNullExpression<'static>>() == 24usize);
    assert!(align_of::<TSNonNullExpression<'static>>() == 8usize);
    assert!(size_of::<Decorator<'static>>() == 24usize);
    assert!(align_of::<Decorator<'static>>() == 8usize);
    assert!(size_of::<TSExportAssignment<'static>>() == 24usize);
    assert!(align_of::<TSExportAssignment<'static>>() == 8usize);
    assert!(size_of::<TSNamespaceExportDeclaration<'static>>() == 32usize);
    assert!(align_of::<TSNamespaceExportDeclaration<'static>>() == 8usize);
    assert!(size_of::<TSInstantiationExpression<'static>>() == 32usize);
    assert!(align_of::<TSInstantiationExpression<'static>>() == 8usize);
    assert!(size_of::<ImportOrExportKind>() == 4usize);
    assert!(align_of::<ImportOrExportKind>() == 4usize);
    assert!(size_of::<JSDocNullableType<'static>>() == 32usize);
    assert!(align_of::<JSDocNullableType<'static>>() == 8usize);
    assert!(size_of::<JSDocNonNullableType<'static>>() == 32usize);
    assert!(align_of::<JSDocNonNullableType<'static>>() == 8usize);
    assert!(size_of::<JSDocUnknownType>() == 8usize);
    assert!(align_of::<JSDocUnknownType>() == 4usize);
    assert!(size_of::<JSXElement<'static>>() == 56usize);
    assert!(align_of::<JSXElement<'static>>() == 8usize);
    assert!(size_of::<JSXOpeningElement<'static>>() == 72usize);
    assert!(align_of::<JSXOpeningElement<'static>>() == 8usize);
    assert!(size_of::<JSXClosingElement<'static>>() == 24usize);
    assert!(align_of::<JSXClosingElement<'static>>() == 8usize);
    assert!(size_of::<JSXFragment<'static>>() == 56usize);
    assert!(align_of::<JSXFragment<'static>>() == 8usize);
    assert!(size_of::<JSXOpeningFragment>() == 8usize);
    assert!(align_of::<JSXOpeningFragment>() == 4usize);
    assert!(size_of::<JSXClosingFragment>() == 8usize);
    assert!(align_of::<JSXClosingFragment>() == 4usize);
    assert!(size_of::<JSXElementName<'static>>() == 16usize);
    assert!(align_of::<JSXElementName<'static>>() == 8usize);
    assert!(size_of::<JSXNamespacedName<'static>>() == 56usize);
    assert!(align_of::<JSXNamespacedName<'static>>() == 8usize);
    assert!(size_of::<JSXMemberExpression<'static>>() == 48usize);
    assert!(align_of::<JSXMemberExpression<'static>>() == 8usize);
    assert!(size_of::<JSXMemberExpressionObject<'static>>() == 16usize);
    assert!(align_of::<JSXMemberExpressionObject<'static>>() == 8usize);
    assert!(size_of::<JSXExpressionContainer<'static>>() == 24usize);
    assert!(align_of::<JSXExpressionContainer<'static>>() == 8usize);
    assert!(size_of::<JSXExpression<'static>>() == 16usize);
    assert!(align_of::<JSXExpression<'static>>() == 8usize);
    assert!(size_of::<JSXEmptyExpression>() == 8usize);
    assert!(align_of::<JSXEmptyExpression>() == 4usize);
    assert!(size_of::<JSXAttributeItem<'static>>() == 16usize);
    assert!(align_of::<JSXAttributeItem<'static>>() == 8usize);
    assert!(size_of::<JSXAttribute<'static>>() == 40usize);
    assert!(align_of::<JSXAttribute<'static>>() == 8usize);
    assert!(size_of::<JSXSpreadAttribute<'static>>() == 24usize);
    assert!(align_of::<JSXSpreadAttribute<'static>>() == 8usize);
    assert!(size_of::<JSXAttributeName<'static>>() == 16usize);
    assert!(align_of::<JSXAttributeName<'static>>() == 8usize);
    assert!(size_of::<JSXAttributeValue<'static>>() == 16usize);
    assert!(align_of::<JSXAttributeValue<'static>>() == 8usize);
    assert!(size_of::<JSXIdentifier<'static>>() == 24usize);
    assert!(align_of::<JSXIdentifier<'static>>() == 8usize);
    assert!(size_of::<JSXChild<'static>>() == 16usize);
    assert!(align_of::<JSXChild<'static>>() == 8usize);
    assert!(size_of::<JSXSpreadChild<'static>>() == 24usize);
    assert!(align_of::<JSXSpreadChild<'static>>() == 8usize);
    assert!(size_of::<JSXText<'static>>() == 24usize);
    assert!(align_of::<JSXText<'static>>() == 8usize);
};
#[cfg(target_pointer_width = "32")]
const _: () = {
    assert!(size_of::<BooleanLiteral>() == 12usize);
    assert!(align_of::<BooleanLiteral>() == 4usize);
    assert!(size_of::<NullLiteral>() == 8usize);
    assert!(align_of::<NullLiteral>() == 4usize);
    assert!(size_of::<NumericLiteral<'static>>() == 32usize);
    assert!(align_of::<NumericLiteral<'static>>() == 8usize);
    assert!(size_of::<BigIntLiteral<'static>>() == 20usize);
    assert!(align_of::<BigIntLiteral<'static>>() == 4usize);
    assert!(size_of::<RegExpLiteral<'static>>() == 20usize);
    assert!(align_of::<RegExpLiteral<'static>>() == 4usize);
    assert!(size_of::<RegExp<'static>>() == 12usize);
    assert!(align_of::<RegExp<'static>>() == 4usize);
    assert!(size_of::<EmptyObject>() == 0usize);
    assert!(align_of::<EmptyObject>() == 1usize);
    assert!(size_of::<StringLiteral<'static>>() == 16usize);
    assert!(align_of::<StringLiteral<'static>>() == 4usize);
    assert!(size_of::<Program<'static>>() == 64usize);
    assert!(align_of::<Program<'static>>() == 4usize);
    assert!(size_of::<Expression<'static>>() == 8usize);
    assert!(align_of::<Expression<'static>>() == 4usize);
    assert!(size_of::<IdentifierName<'static>>() == 16usize);
    assert!(align_of::<IdentifierName<'static>>() == 4usize);
    assert!(size_of::<IdentifierReference<'static>>() == 24usize);
    assert!(align_of::<IdentifierReference<'static>>() == 4usize);
    assert!(size_of::<BindingIdentifier<'static>>() == 20usize);
    assert!(align_of::<BindingIdentifier<'static>>() == 4usize);
    assert!(size_of::<LabelIdentifier<'static>>() == 16usize);
    assert!(align_of::<LabelIdentifier<'static>>() == 4usize);
    assert!(size_of::<ThisExpression>() == 8usize);
    assert!(align_of::<ThisExpression>() == 4usize);
    assert!(size_of::<ArrayExpression<'static>>() == 36usize);
    assert!(align_of::<ArrayExpression<'static>>() == 4usize);
    assert!(size_of::<ArrayExpressionElement<'static>>() == 12usize);
    assert!(align_of::<ArrayExpressionElement<'static>>() == 4usize);
    assert!(size_of::<Elision>() == 8usize);
    assert!(align_of::<Elision>() == 4usize);
    assert!(size_of::<ObjectExpression<'static>>() == 36usize);
    assert!(align_of::<ObjectExpression<'static>>() == 4usize);
    assert!(size_of::<ObjectPropertyKind<'static>>() == 8usize);
    assert!(align_of::<ObjectPropertyKind<'static>>() == 4usize);
    assert!(size_of::<ObjectProperty<'static>>() == 40usize);
    assert!(align_of::<ObjectProperty<'static>>() == 4usize);
    assert!(size_of::<PropertyKey<'static>>() == 8usize);
    assert!(align_of::<PropertyKey<'static>>() == 4usize);
    assert!(size_of::<PropertyKind>() == 4usize);
    assert!(align_of::<PropertyKind>() == 4usize);
    assert!(size_of::<TemplateLiteral<'static>>() == 40usize);
    assert!(align_of::<TemplateLiteral<'static>>() == 4usize);
    assert!(size_of::<TaggedTemplateExpression<'static>>() == 60usize);
    assert!(align_of::<TaggedTemplateExpression<'static>>() == 4usize);
    assert!(size_of::<TemplateElement<'static>>() == 28usize);
    assert!(align_of::<TemplateElement<'static>>() == 4usize);
    assert!(size_of::<TemplateElementValue<'static>>() == 16usize);
    assert!(align_of::<TemplateElementValue<'static>>() == 4usize);
    assert!(size_of::<MemberExpression<'static>>() == 8usize);
    assert!(align_of::<MemberExpression<'static>>() == 4usize);
    assert!(size_of::<ComputedMemberExpression<'static>>() == 28usize);
    assert!(align_of::<ComputedMemberExpression<'static>>() == 4usize);
    assert!(size_of::<StaticMemberExpression<'static>>() == 36usize);
    assert!(align_of::<StaticMemberExpression<'static>>() == 4usize);
    assert!(size_of::<PrivateFieldExpression<'static>>() == 36usize);
    assert!(align_of::<PrivateFieldExpression<'static>>() == 4usize);
    assert!(size_of::<CallExpression<'static>>() == 40usize);
    assert!(align_of::<CallExpression<'static>>() == 4usize);
    assert!(size_of::<NewExpression<'static>>() == 36usize);
    assert!(align_of::<NewExpression<'static>>() == 4usize);
    assert!(size_of::<MetaProperty<'static>>() == 40usize);
    assert!(align_of::<MetaProperty<'static>>() == 4usize);
    assert!(size_of::<SpreadElement<'static>>() == 16usize);
    assert!(align_of::<SpreadElement<'static>>() == 4usize);
    assert!(size_of::<Argument<'static>>() == 8usize);
    assert!(align_of::<Argument<'static>>() == 4usize);
    assert!(size_of::<UpdateExpression<'static>>() == 20usize);
    assert!(align_of::<UpdateExpression<'static>>() == 4usize);
    assert!(size_of::<UnaryExpression<'static>>() == 20usize);
    assert!(align_of::<UnaryExpression<'static>>() == 4usize);
    assert!(size_of::<BinaryExpression<'static>>() == 28usize);
    assert!(align_of::<BinaryExpression<'static>>() == 4usize);
    assert!(size_of::<PrivateInExpression<'static>>() == 36usize);
    assert!(align_of::<PrivateInExpression<'static>>() == 4usize);
    assert!(size_of::<LogicalExpression<'static>>() == 28usize);
    assert!(align_of::<LogicalExpression<'static>>() == 4usize);
    assert!(size_of::<ConditionalExpression<'static>>() == 32usize);
    assert!(align_of::<ConditionalExpression<'static>>() == 4usize);
    assert!(size_of::<AssignmentExpression<'static>>() == 28usize);
    assert!(align_of::<AssignmentExpression<'static>>() == 4usize);
    assert!(size_of::<AssignmentTarget<'static>>() == 8usize);
    assert!(align_of::<AssignmentTarget<'static>>() == 4usize);
    assert!(size_of::<SimpleAssignmentTarget<'static>>() == 8usize);
    assert!(align_of::<SimpleAssignmentTarget<'static>>() == 4usize);
    assert!(size_of::<AssignmentTargetPattern<'static>>() == 8usize);
    assert!(align_of::<AssignmentTargetPattern<'static>>() == 4usize);
    assert!(size_of::<ArrayAssignmentTarget<'static>>() == 52usize);
    assert!(align_of::<ArrayAssignmentTarget<'static>>() == 4usize);
    assert!(size_of::<ObjectAssignmentTarget<'static>>() == 40usize);
    assert!(align_of::<ObjectAssignmentTarget<'static>>() == 4usize);
    assert!(size_of::<AssignmentTargetRest<'static>>() == 16usize);
    assert!(align_of::<AssignmentTargetRest<'static>>() == 4usize);
    assert!(size_of::<AssignmentTargetMaybeDefault<'static>>() == 8usize);
    assert!(align_of::<AssignmentTargetMaybeDefault<'static>>() == 4usize);
    assert!(size_of::<AssignmentTargetWithDefault<'static>>() == 24usize);
    assert!(align_of::<AssignmentTargetWithDefault<'static>>() == 4usize);
    assert!(size_of::<AssignmentTargetProperty<'static>>() == 8usize);
    assert!(align_of::<AssignmentTargetProperty<'static>>() == 4usize);
    assert!(size_of::<AssignmentTargetPropertyIdentifier<'static>>() == 40usize);
    assert!(align_of::<AssignmentTargetPropertyIdentifier<'static>>() == 4usize);
    assert!(size_of::<AssignmentTargetPropertyProperty<'static>>() == 24usize);
    assert!(align_of::<AssignmentTargetPropertyProperty<'static>>() == 4usize);
    assert!(size_of::<SequenceExpression<'static>>() == 24usize);
    assert!(align_of::<SequenceExpression<'static>>() == 4usize);
    assert!(size_of::<Super>() == 8usize);
    assert!(align_of::<Super>() == 4usize);
    assert!(size_of::<AwaitExpression<'static>>() == 16usize);
    assert!(align_of::<AwaitExpression<'static>>() == 4usize);
    assert!(size_of::<ChainExpression<'static>>() == 16usize);
    assert!(align_of::<ChainExpression<'static>>() == 4usize);
    assert!(size_of::<ChainElement<'static>>() == 8usize);
    assert!(align_of::<ChainElement<'static>>() == 4usize);
    assert!(size_of::<ParenthesizedExpression<'static>>() == 16usize);
    assert!(align_of::<ParenthesizedExpression<'static>>() == 4usize);
    assert!(size_of::<Statement<'static>>() == 8usize);
    assert!(align_of::<Statement<'static>>() == 4usize);
    assert!(size_of::<Directive<'static>>() == 32usize);
    assert!(align_of::<Directive<'static>>() == 4usize);
    assert!(size_of::<Hashbang<'static>>() == 16usize);
    assert!(align_of::<Hashbang<'static>>() == 4usize);
    assert!(size_of::<BlockStatement<'static>>() == 28usize);
    assert!(align_of::<BlockStatement<'static>>() == 4usize);
    assert!(size_of::<Declaration<'static>>() == 8usize);
    assert!(align_of::<Declaration<'static>>() == 4usize);
    assert!(size_of::<VariableDeclaration<'static>>() == 32usize);
    assert!(align_of::<VariableDeclaration<'static>>() == 4usize);
    assert!(size_of::<VariableDeclarationKind>() == 4usize);
    assert!(align_of::<VariableDeclarationKind>() == 4usize);
    assert!(size_of::<VariableDeclarator<'static>>() == 40usize);
    assert!(align_of::<VariableDeclarator<'static>>() == 4usize);
    assert!(size_of::<UsingDeclaration<'static>>() == 28usize);
    assert!(align_of::<UsingDeclaration<'static>>() == 4usize);
    assert!(size_of::<EmptyStatement>() == 8usize);
    assert!(align_of::<EmptyStatement>() == 4usize);
    assert!(size_of::<ExpressionStatement<'static>>() == 16usize);
    assert!(align_of::<ExpressionStatement<'static>>() == 4usize);
    assert!(size_of::<IfStatement<'static>>() == 32usize);
    assert!(align_of::<IfStatement<'static>>() == 4usize);
    assert!(size_of::<DoWhileStatement<'static>>() == 24usize);
    assert!(align_of::<DoWhileStatement<'static>>() == 4usize);
    assert!(size_of::<WhileStatement<'static>>() == 24usize);
    assert!(align_of::<WhileStatement<'static>>() == 4usize);
    assert!(size_of::<ForStatement<'static>>() == 44usize);
    assert!(align_of::<ForStatement<'static>>() == 4usize);
    assert!(size_of::<ForStatementInit<'static>>() == 8usize);
    assert!(align_of::<ForStatementInit<'static>>() == 4usize);
    assert!(size_of::<ForInStatement<'static>>() == 36usize);
    assert!(align_of::<ForInStatement<'static>>() == 4usize);
    assert!(size_of::<ForStatementLeft<'static>>() == 8usize);
    assert!(align_of::<ForStatementLeft<'static>>() == 4usize);
    assert!(size_of::<ForOfStatement<'static>>() == 40usize);
    assert!(align_of::<ForOfStatement<'static>>() == 4usize);
    assert!(size_of::<ContinueStatement<'static>>() == 24usize);
    assert!(align_of::<ContinueStatement<'static>>() == 4usize);
    assert!(size_of::<BreakStatement<'static>>() == 24usize);
    assert!(align_of::<BreakStatement<'static>>() == 4usize);
    assert!(size_of::<ReturnStatement<'static>>() == 16usize);
    assert!(align_of::<ReturnStatement<'static>>() == 4usize);
    assert!(size_of::<WithStatement<'static>>() == 24usize);
    assert!(align_of::<WithStatement<'static>>() == 4usize);
    assert!(size_of::<SwitchStatement<'static>>() == 36usize);
    assert!(align_of::<SwitchStatement<'static>>() == 4usize);
    assert!(size_of::<SwitchCase<'static>>() == 32usize);
    assert!(align_of::<SwitchCase<'static>>() == 4usize);
    assert!(size_of::<LabeledStatement<'static>>() == 32usize);
    assert!(align_of::<LabeledStatement<'static>>() == 4usize);
    assert!(size_of::<ThrowStatement<'static>>() == 16usize);
    assert!(align_of::<ThrowStatement<'static>>() == 4usize);
    assert!(size_of::<TryStatement<'static>>() == 20usize);
    assert!(align_of::<TryStatement<'static>>() == 4usize);
    assert!(size_of::<CatchClause<'static>>() == 40usize);
    assert!(align_of::<CatchClause<'static>>() == 4usize);
    assert!(size_of::<CatchParameter<'static>>() == 24usize);
    assert!(align_of::<CatchParameter<'static>>() == 4usize);
    assert!(size_of::<DebuggerStatement>() == 8usize);
    assert!(align_of::<DebuggerStatement>() == 4usize);
    assert!(size_of::<BindingPattern<'static>>() == 16usize);
    assert!(align_of::<BindingPattern<'static>>() == 4usize);
    assert!(size_of::<BindingPatternKind<'static>>() == 8usize);
    assert!(align_of::<BindingPatternKind<'static>>() == 4usize);
    assert!(size_of::<AssignmentPattern<'static>>() == 32usize);
    assert!(align_of::<AssignmentPattern<'static>>() == 4usize);
    assert!(size_of::<ObjectPattern<'static>>() == 28usize);
    assert!(align_of::<ObjectPattern<'static>>() == 4usize);
    assert!(size_of::<BindingProperty<'static>>() == 36usize);
    assert!(align_of::<BindingProperty<'static>>() == 4usize);
    assert!(size_of::<ArrayPattern<'static>>() == 28usize);
    assert!(align_of::<ArrayPattern<'static>>() == 4usize);
    assert!(size_of::<BindingRestElement<'static>>() == 24usize);
    assert!(align_of::<BindingRestElement<'static>>() == 4usize);
    assert!(size_of::<Function<'static>>() == 84usize);
    assert!(align_of::<Function<'static>>() == 4usize);
    assert!(size_of::<FunctionType>() == 4usize);
    assert!(align_of::<FunctionType>() == 4usize);
    assert!(size_of::<FormalParameters<'static>>() == 32usize);
    assert!(align_of::<FormalParameters<'static>>() == 4usize);
    assert!(size_of::<FormalParameter<'static>>() == 48usize);
    assert!(align_of::<FormalParameter<'static>>() == 4usize);
    assert!(size_of::<FormalParameterKind>() == 4usize);
    assert!(align_of::<FormalParameterKind>() == 4usize);
    assert!(size_of::<FunctionBody<'static>>() == 40usize);
    assert!(align_of::<FunctionBody<'static>>() == 4usize);
    assert!(size_of::<ArrowFunctionExpression<'static>>() == 32usize);
    assert!(align_of::<ArrowFunctionExpression<'static>>() == 4usize);
    assert!(size_of::<YieldExpression<'static>>() == 20usize);
    assert!(align_of::<YieldExpression<'static>>() == 4usize);
    assert!(size_of::<Class<'static>>() == 92usize);
    assert!(align_of::<Class<'static>>() == 4usize);
    assert!(size_of::<ClassType>() == 4usize);
    assert!(align_of::<ClassType>() == 4usize);
    assert!(size_of::<ClassBody<'static>>() == 24usize);
    assert!(align_of::<ClassBody<'static>>() == 4usize);
    assert!(size_of::<ClassElement<'static>>() == 8usize);
    assert!(align_of::<ClassElement<'static>>() == 4usize);
    assert!(size_of::<MethodDefinition<'static>>() == 52usize);
    assert!(align_of::<MethodDefinition<'static>>() == 4usize);
    assert!(size_of::<MethodDefinitionType>() == 4usize);
    assert!(align_of::<MethodDefinitionType>() == 4usize);
    assert!(size_of::<PropertyDefinition<'static>>() == 60usize);
    assert!(align_of::<PropertyDefinition<'static>>() == 4usize);
    assert!(size_of::<PropertyDefinitionType>() == 4usize);
    assert!(align_of::<PropertyDefinitionType>() == 4usize);
    assert!(size_of::<MethodDefinitionKind>() == 4usize);
    assert!(align_of::<MethodDefinitionKind>() == 4usize);
    assert!(size_of::<PrivateIdentifier<'static>>() == 16usize);
    assert!(align_of::<PrivateIdentifier<'static>>() == 4usize);
    assert!(size_of::<StaticBlock<'static>>() == 28usize);
    assert!(align_of::<StaticBlock<'static>>() == 4usize);
    assert!(size_of::<ModuleDeclaration<'static>>() == 8usize);
    assert!(align_of::<ModuleDeclaration<'static>>() == 4usize);
    assert!(size_of::<AccessorPropertyType>() == 4usize);
    assert!(align_of::<AccessorPropertyType>() == 4usize);
    assert!(size_of::<AccessorProperty<'static>>() == 48usize);
    assert!(align_of::<AccessorProperty<'static>>() == 4usize);
    assert!(size_of::<ImportExpression<'static>>() == 32usize);
    assert!(align_of::<ImportExpression<'static>>() == 4usize);
    assert!(size_of::<ImportDeclaration<'static>>() == 84usize);
    assert!(align_of::<ImportDeclaration<'static>>() == 4usize);
    assert!(size_of::<ImportDeclarationSpecifier<'static>>() == 8usize);
    assert!(align_of::<ImportDeclarationSpecifier<'static>>() == 4usize);
    assert!(size_of::<ImportSpecifier<'static>>() == 60usize);
    assert!(align_of::<ImportSpecifier<'static>>() == 4usize);
    assert!(size_of::<ImportDefaultSpecifier<'static>>() == 28usize);
    assert!(align_of::<ImportDefaultSpecifier<'static>>() == 4usize);
    assert!(size_of::<ImportNamespaceSpecifier<'static>>() == 28usize);
    assert!(align_of::<ImportNamespaceSpecifier<'static>>() == 4usize);
    assert!(size_of::<WithClause<'static>>() == 40usize);
    assert!(align_of::<WithClause<'static>>() == 4usize);
    assert!(size_of::<ImportAttribute<'static>>() == 44usize);
    assert!(align_of::<ImportAttribute<'static>>() == 4usize);
    assert!(size_of::<ImportAttributeKey<'static>>() == 20usize);
    assert!(align_of::<ImportAttributeKey<'static>>() == 4usize);
    assert!(size_of::<ExportNamedDeclaration<'static>>() == 92usize);
    assert!(align_of::<ExportNamedDeclaration<'static>>() == 4usize);
    assert!(size_of::<ExportDefaultDeclaration<'static>>() == 44usize);
    assert!(align_of::<ExportDefaultDeclaration<'static>>() == 4usize);
    assert!(size_of::<ExportAllDeclaration<'static>>() == 96usize);
    assert!(align_of::<ExportAllDeclaration<'static>>() == 4usize);
    assert!(size_of::<ExportSpecifier<'static>>() == 68usize);
    assert!(align_of::<ExportSpecifier<'static>>() == 4usize);
    assert!(size_of::<ExportDefaultDeclarationKind<'static>>() == 8usize);
    assert!(align_of::<ExportDefaultDeclarationKind<'static>>() == 4usize);
    assert!(size_of::<ModuleExportName<'static>>() == 28usize);
    assert!(align_of::<ModuleExportName<'static>>() == 4usize);
    assert!(size_of::<TSThisParameter<'static>>() == 28usize);
    assert!(align_of::<TSThisParameter<'static>>() == 4usize);
    assert!(size_of::<TSEnumDeclaration<'static>>() == 52usize);
    assert!(align_of::<TSEnumDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSEnumMember<'static>>() == 24usize);
    assert!(align_of::<TSEnumMember<'static>>() == 4usize);
    assert!(size_of::<TSEnumMemberName<'static>>() == 8usize);
    assert!(align_of::<TSEnumMemberName<'static>>() == 4usize);
    assert!(size_of::<TSTypeAnnotation<'static>>() == 16usize);
    assert!(align_of::<TSTypeAnnotation<'static>>() == 4usize);
    assert!(size_of::<TSLiteralType<'static>>() == 16usize);
    assert!(align_of::<TSLiteralType<'static>>() == 4usize);
    assert!(size_of::<TSLiteral<'static>>() == 8usize);
    assert!(align_of::<TSLiteral<'static>>() == 4usize);
    assert!(size_of::<TSType<'static>>() == 8usize);
    assert!(align_of::<TSType<'static>>() == 4usize);
    assert!(size_of::<TSConditionalType<'static>>() == 44usize);
    assert!(align_of::<TSConditionalType<'static>>() == 4usize);
    assert!(size_of::<TSUnionType<'static>>() == 24usize);
    assert!(align_of::<TSUnionType<'static>>() == 4usize);
    assert!(size_of::<TSIntersectionType<'static>>() == 24usize);
    assert!(align_of::<TSIntersectionType<'static>>() == 4usize);
    assert!(size_of::<TSParenthesizedType<'static>>() == 16usize);
    assert!(align_of::<TSParenthesizedType<'static>>() == 4usize);
    assert!(size_of::<TSTypeOperator<'static>>() == 20usize);
    assert!(align_of::<TSTypeOperator<'static>>() == 4usize);
    assert!(size_of::<TSTypeOperatorOperator>() == 4usize);
    assert!(align_of::<TSTypeOperatorOperator>() == 4usize);
    assert!(size_of::<TSArrayType<'static>>() == 16usize);
    assert!(align_of::<TSArrayType<'static>>() == 4usize);
    assert!(size_of::<TSIndexedAccessType<'static>>() == 24usize);
    assert!(align_of::<TSIndexedAccessType<'static>>() == 4usize);
    assert!(size_of::<TSTupleType<'static>>() == 24usize);
    assert!(align_of::<TSTupleType<'static>>() == 4usize);
    assert!(size_of::<TSNamedTupleMember<'static>>() == 36usize);
    assert!(align_of::<TSNamedTupleMember<'static>>() == 4usize);
    assert!(size_of::<TSOptionalType<'static>>() == 16usize);
    assert!(align_of::<TSOptionalType<'static>>() == 4usize);
    assert!(size_of::<TSRestType<'static>>() == 16usize);
    assert!(align_of::<TSRestType<'static>>() == 4usize);
    assert!(size_of::<TSTupleElement<'static>>() == 8usize);
    assert!(align_of::<TSTupleElement<'static>>() == 4usize);
    assert!(size_of::<TSAnyKeyword>() == 8usize);
    assert!(align_of::<TSAnyKeyword>() == 4usize);
    assert!(size_of::<TSStringKeyword>() == 8usize);
    assert!(align_of::<TSStringKeyword>() == 4usize);
    assert!(size_of::<TSBooleanKeyword>() == 8usize);
    assert!(align_of::<TSBooleanKeyword>() == 4usize);
    assert!(size_of::<TSNumberKeyword>() == 8usize);
    assert!(align_of::<TSNumberKeyword>() == 4usize);
    assert!(size_of::<TSNeverKeyword>() == 8usize);
    assert!(align_of::<TSNeverKeyword>() == 4usize);
    assert!(size_of::<TSIntrinsicKeyword>() == 8usize);
    assert!(align_of::<TSIntrinsicKeyword>() == 4usize);
    assert!(size_of::<TSUnknownKeyword>() == 8usize);
    assert!(align_of::<TSUnknownKeyword>() == 4usize);
    assert!(size_of::<TSNullKeyword>() == 8usize);
    assert!(align_of::<TSNullKeyword>() == 4usize);
    assert!(size_of::<TSUndefinedKeyword>() == 8usize);
    assert!(align_of::<TSUndefinedKeyword>() == 4usize);
    assert!(size_of::<TSVoidKeyword>() == 8usize);
    assert!(align_of::<TSVoidKeyword>() == 4usize);
    assert!(size_of::<TSSymbolKeyword>() == 8usize);
    assert!(align_of::<TSSymbolKeyword>() == 4usize);
    assert!(size_of::<TSThisType>() == 8usize);
    assert!(align_of::<TSThisType>() == 4usize);
    assert!(size_of::<TSObjectKeyword>() == 8usize);
    assert!(align_of::<TSObjectKeyword>() == 4usize);
    assert!(size_of::<TSBigIntKeyword>() == 8usize);
    assert!(align_of::<TSBigIntKeyword>() == 4usize);
    assert!(size_of::<TSTypeReference<'static>>() == 20usize);
    assert!(align_of::<TSTypeReference<'static>>() == 4usize);
    assert!(size_of::<TSTypeName<'static>>() == 8usize);
    assert!(align_of::<TSTypeName<'static>>() == 4usize);
    assert!(size_of::<TSQualifiedName<'static>>() == 32usize);
    assert!(align_of::<TSQualifiedName<'static>>() == 4usize);
    assert!(size_of::<TSTypeParameterInstantiation<'static>>() == 24usize);
    assert!(align_of::<TSTypeParameterInstantiation<'static>>() == 4usize);
    assert!(size_of::<TSTypeParameter<'static>>() == 48usize);
    assert!(align_of::<TSTypeParameter<'static>>() == 4usize);
    assert!(size_of::<TSTypeParameterDeclaration<'static>>() == 24usize);
    assert!(align_of::<TSTypeParameterDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSTypeAliasDeclaration<'static>>() == 48usize);
    assert!(align_of::<TSTypeAliasDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSAccessibility>() == 4usize);
    assert!(align_of::<TSAccessibility>() == 4usize);
    assert!(size_of::<TSClassImplements<'static>>() == 20usize);
    assert!(align_of::<TSClassImplements<'static>>() == 4usize);
    assert!(size_of::<TSInterfaceDeclaration<'static>>() == 60usize);
    assert!(align_of::<TSInterfaceDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSInterfaceBody<'static>>() == 24usize);
    assert!(align_of::<TSInterfaceBody<'static>>() == 4usize);
    assert!(size_of::<TSPropertySignature<'static>>() == 24usize);
    assert!(align_of::<TSPropertySignature<'static>>() == 4usize);
    assert!(size_of::<TSSignature<'static>>() == 8usize);
    assert!(align_of::<TSSignature<'static>>() == 4usize);
    assert!(size_of::<TSIndexSignature<'static>>() == 32usize);
    assert!(align_of::<TSIndexSignature<'static>>() == 4usize);
    assert!(size_of::<TSCallSignatureDeclaration<'static>>() == 48usize);
    assert!(align_of::<TSCallSignatureDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSMethodSignatureKind>() == 4usize);
    assert!(align_of::<TSMethodSignatureKind>() == 4usize);
    assert!(size_of::<TSMethodSignature<'static>>() == 68usize);
    assert!(align_of::<TSMethodSignature<'static>>() == 4usize);
    assert!(size_of::<TSConstructSignatureDeclaration<'static>>() == 24usize);
    assert!(align_of::<TSConstructSignatureDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSIndexSignatureName<'static>>() == 20usize);
    assert!(align_of::<TSIndexSignatureName<'static>>() == 4usize);
    assert!(size_of::<TSInterfaceHeritage<'static>>() == 20usize);
    assert!(align_of::<TSInterfaceHeritage<'static>>() == 4usize);
    assert!(size_of::<TSTypePredicate<'static>>() == 28usize);
    assert!(align_of::<TSTypePredicate<'static>>() == 4usize);
    assert!(size_of::<TSTypePredicateName<'static>>() == 12usize);
    assert!(align_of::<TSTypePredicateName<'static>>() == 4usize);
    assert!(size_of::<TSModuleDeclaration<'static>>() == 48usize);
    assert!(align_of::<TSModuleDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSModuleDeclarationKind>() == 4usize);
    assert!(align_of::<TSModuleDeclarationKind>() == 4usize);
    assert!(size_of::<TSModuleDeclarationName<'static>>() == 20usize);
    assert!(align_of::<TSModuleDeclarationName<'static>>() == 4usize);
    assert!(size_of::<TSModuleDeclarationBody<'static>>() == 8usize);
    assert!(align_of::<TSModuleDeclarationBody<'static>>() == 4usize);
    assert!(size_of::<TSModuleBlock<'static>>() == 40usize);
    assert!(align_of::<TSModuleBlock<'static>>() == 4usize);
    assert!(size_of::<TSTypeLiteral<'static>>() == 24usize);
    assert!(align_of::<TSTypeLiteral<'static>>() == 4usize);
    assert!(size_of::<TSInferType<'static>>() == 12usize);
    assert!(align_of::<TSInferType<'static>>() == 4usize);
    assert!(size_of::<TSTypeQuery<'static>>() == 20usize);
    assert!(align_of::<TSTypeQuery<'static>>() == 4usize);
    assert!(size_of::<TSTypeQueryExprName<'static>>() == 8usize);
    assert!(align_of::<TSTypeQueryExprName<'static>>() == 4usize);
    assert!(size_of::<TSImportType<'static>>() == 56usize);
    assert!(align_of::<TSImportType<'static>>() == 4usize);
    assert!(size_of::<TSImportAttributes<'static>>() == 24usize);
    assert!(align_of::<TSImportAttributes<'static>>() == 4usize);
    assert!(size_of::<TSImportAttribute<'static>>() == 36usize);
    assert!(align_of::<TSImportAttribute<'static>>() == 4usize);
    assert!(size_of::<TSImportAttributeName<'static>>() == 20usize);
    assert!(align_of::<TSImportAttributeName<'static>>() == 4usize);
    assert!(size_of::<TSFunctionType<'static>>() == 48usize);
    assert!(align_of::<TSFunctionType<'static>>() == 4usize);
    assert!(size_of::<TSConstructorType<'static>>() == 24usize);
    assert!(align_of::<TSConstructorType<'static>>() == 4usize);
    assert!(size_of::<TSMappedType<'static>>() == 40usize);
    assert!(align_of::<TSMappedType<'static>>() == 4usize);
    assert!(size_of::<TSMappedTypeModifierOperator>() == 4usize);
    assert!(align_of::<TSMappedTypeModifierOperator>() == 4usize);
    assert!(size_of::<TSTemplateLiteralType<'static>>() == 40usize);
    assert!(align_of::<TSTemplateLiteralType<'static>>() == 4usize);
    assert!(size_of::<TSAsExpression<'static>>() == 24usize);
    assert!(align_of::<TSAsExpression<'static>>() == 4usize);
    assert!(size_of::<TSSatisfiesExpression<'static>>() == 24usize);
    assert!(align_of::<TSSatisfiesExpression<'static>>() == 4usize);
    assert!(size_of::<TSTypeAssertion<'static>>() == 24usize);
    assert!(align_of::<TSTypeAssertion<'static>>() == 4usize);
    assert!(size_of::<TSImportEqualsDeclaration<'static>>() == 40usize);
    assert!(align_of::<TSImportEqualsDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSModuleReference<'static>>() == 8usize);
    assert!(align_of::<TSModuleReference<'static>>() == 4usize);
    assert!(size_of::<TSExternalModuleReference<'static>>() == 24usize);
    assert!(align_of::<TSExternalModuleReference<'static>>() == 4usize);
    assert!(size_of::<TSNonNullExpression<'static>>() == 16usize);
    assert!(align_of::<TSNonNullExpression<'static>>() == 4usize);
    assert!(size_of::<Decorator<'static>>() == 16usize);
    assert!(align_of::<Decorator<'static>>() == 4usize);
    assert!(size_of::<TSExportAssignment<'static>>() == 16usize);
    assert!(align_of::<TSExportAssignment<'static>>() == 4usize);
    assert!(size_of::<TSNamespaceExportDeclaration<'static>>() == 24usize);
    assert!(align_of::<TSNamespaceExportDeclaration<'static>>() == 4usize);
    assert!(size_of::<TSInstantiationExpression<'static>>() == 20usize);
    assert!(align_of::<TSInstantiationExpression<'static>>() == 4usize);
    assert!(size_of::<ImportOrExportKind>() == 4usize);
    assert!(align_of::<ImportOrExportKind>() == 4usize);
    assert!(size_of::<JSDocNullableType<'static>>() == 20usize);
    assert!(align_of::<JSDocNullableType<'static>>() == 4usize);
    assert!(size_of::<JSDocNonNullableType<'static>>() == 20usize);
    assert!(align_of::<JSDocNonNullableType<'static>>() == 4usize);
    assert!(size_of::<JSDocUnknownType>() == 8usize);
    assert!(align_of::<JSDocUnknownType>() == 4usize);
    assert!(size_of::<JSXElement<'static>>() == 32usize);
    assert!(align_of::<JSXElement<'static>>() == 4usize);
    assert!(size_of::<JSXOpeningElement<'static>>() == 40usize);
    assert!(align_of::<JSXOpeningElement<'static>>() == 4usize);
    assert!(size_of::<JSXClosingElement<'static>>() == 16usize);
    assert!(align_of::<JSXClosingElement<'static>>() == 4usize);
    assert!(size_of::<JSXFragment<'static>>() == 40usize);
    assert!(align_of::<JSXFragment<'static>>() == 4usize);
    assert!(size_of::<JSXOpeningFragment>() == 8usize);
    assert!(align_of::<JSXOpeningFragment>() == 4usize);
    assert!(size_of::<JSXClosingFragment>() == 8usize);
    assert!(align_of::<JSXClosingFragment>() == 4usize);
    assert!(size_of::<JSXElementName<'static>>() == 8usize);
    assert!(align_of::<JSXElementName<'static>>() == 4usize);
    assert!(size_of::<JSXNamespacedName<'static>>() == 40usize);
    assert!(align_of::<JSXNamespacedName<'static>>() == 4usize);
    assert!(size_of::<JSXMemberExpression<'static>>() == 32usize);
    assert!(align_of::<JSXMemberExpression<'static>>() == 4usize);
    assert!(size_of::<JSXMemberExpressionObject<'static>>() == 8usize);
    assert!(align_of::<JSXMemberExpressionObject<'static>>() == 4usize);
    assert!(size_of::<JSXExpressionContainer<'static>>() == 20usize);
    assert!(align_of::<JSXExpressionContainer<'static>>() == 4usize);
    assert!(size_of::<JSXExpression<'static>>() == 12usize);
    assert!(align_of::<JSXExpression<'static>>() == 4usize);
    assert!(size_of::<JSXEmptyExpression>() == 8usize);
    assert!(align_of::<JSXEmptyExpression>() == 4usize);
    assert!(size_of::<JSXAttributeItem<'static>>() == 8usize);
    assert!(align_of::<JSXAttributeItem<'static>>() == 4usize);
    assert!(size_of::<JSXAttribute<'static>>() == 24usize);
    assert!(align_of::<JSXAttribute<'static>>() == 4usize);
    assert!(size_of::<JSXSpreadAttribute<'static>>() == 16usize);
    assert!(align_of::<JSXSpreadAttribute<'static>>() == 4usize);
    assert!(size_of::<JSXAttributeName<'static>>() == 8usize);
    assert!(align_of::<JSXAttributeName<'static>>() == 4usize);
    assert!(size_of::<JSXAttributeValue<'static>>() == 8usize);
    assert!(align_of::<JSXAttributeValue<'static>>() == 4usize);
    assert!(size_of::<JSXIdentifier<'static>>() == 16usize);
    assert!(align_of::<JSXIdentifier<'static>>() == 4usize);
    assert!(size_of::<JSXChild<'static>>() == 8usize);
    assert!(align_of::<JSXChild<'static>>() == 4usize);
    assert!(size_of::<JSXSpreadChild<'static>>() == 16usize);
    assert!(align_of::<JSXSpreadChild<'static>>() == 4usize);
    assert!(size_of::<JSXText<'static>>() == 16usize);
    assert!(align_of::<JSXText<'static>>() == 4usize);
};
#[cfg(not(any(target_pointer_width = "64", target_pointer_width = "32")))]
const _: () = panic!("Platforms with pointer width other than 64 or 32 bit are not supported");
