{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OxlintConfig",
  "description": "Oxlint Configuration File\n\nThis configuration is aligned with ESLint v8's configuration schema (`eslintrc.json`).\n\nUsage: `oxlint -c oxlintrc.json`\n\n::: danger NOTE\n\nOnly the `.json` format is supported. You can use comments in configuration files.\n\n:::\n\nExample\n\n`.oxlintrc.json`\n\n```json { \"env\": { \"browser\": true }, \"globals\": { \"foo\": \"readonly\" }, \"settings\": { }, \"rules\": { \"eqeqeq\": \"warn\" } } ```",
  "type": "object",
  "properties": {
    "env": {
      "$ref": "#/definitions/OxlintEnv"
    },
    "globals": {
      "$ref": "#/definitions/OxlintGlobals"
    },
    "rules": {
      "description": "See [Oxlint Rules](./rules)",
      "allOf": [
        {
          "$ref": "#/definitions/OxlintRules"
        }
      ]
    },
    "settings": {
      "$ref": "#/definitions/OxlintSettings"
    }
  },
  "definitions": {
    "AllowWarnDeny": {
      "oneOf": [
        {
          "description": "Oxlint rule.\n- \"allow\" or \"off\": Turn off the rule.\n- \"warn\": Turn the rule on as a warning (doesn't affect exit code).\n- \"error\" or \"deny\": Turn the rule on as an error (will exit with a failure code).",
          "type": "string",
          "enum": [
            "allow",
            "off",
            "warn",
            "error",
            "deny"
          ]
        },
        {
          "description": "Oxlint rule.\n    \n- 0: Turn off the rule.\n- 1: Turn the rule on as a warning (doesn't affect exit code).\n- 2: Turn the rule on as an error (will exit with a failure code).",
          "type": "integer",
          "format": "uint32",
          "maximum": 2.0,
          "minimum": 0.0
        }
      ]
    },
    "CustomComponent": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "attribute",
            "name"
          ],
          "properties": {
            "attribute": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "attributes",
            "name"
          ],
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DummyRule": {
      "anyOf": [
        {
          "$ref": "#/definitions/AllowWarnDeny"
        },
        {
          "type": "array",
          "items": true
        }
      ]
    },
    "GlobalValue": {
      "type": "string",
      "enum": [
        "readonly",
        "writeable",
        "off"
      ]
    },
    "JSDocPluginSettings": {
      "type": "object",
      "properties": {
        "augmentsExtendsReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": false,
          "type": "boolean"
        },
        "exemptDestructuredRootsFromChecks": {
          "description": "Only for `require-param-type` and `require-param-description` rule",
          "default": false,
          "type": "boolean"
        },
        "ignoreInternal": {
          "description": "For all rules but NOT apply to `empty-tags` rule",
          "default": false,
          "type": "boolean"
        },
        "ignorePrivate": {
          "description": "For all rules but NOT apply to `check-access` and `empty-tags` rule",
          "default": false,
          "type": "boolean"
        },
        "ignoreReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": true,
          "type": "boolean"
        },
        "implementsReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": false,
          "type": "boolean"
        },
        "overrideReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": true,
          "type": "boolean"
        },
        "tagNamePreference": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TagNamePreference"
          }
        }
      }
    },
    "JSXA11yPluginSettings": {
      "description": "Configure JSX A11y plugin rules.\n\nSee [eslint-plugin-jsx-a11y](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y#configurations)'s configuration for a full reference.",
      "type": "object",
      "properties": {
        "components": {
          "description": "To have your custom components be checked as DOM elements, you can provide a mapping of your component names to the DOM element name.\n\n## Example\n\n```json { \"settings\": { \"jsx-a11y\": { \"components\": { \"Link\": \"a\", \"IconButton\": \"button\" } } } } ```",
          "default": {},
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "polymorphicPropName": {
          "description": "An optional setting that define the prop your code uses to create polymorphic components. This setting will be used to determine the element type in rules that require semantic context.\n\nFor example, if you set the `polymorphicPropName` to `as`, then this element:\n\n```jsx <Box as=\"h3\">Hello</Box> ```\n\nWill be treated as an `h3`. If not set, this component will be treated as a `Box`.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NextPluginSettings": {
      "description": "Configure Next.js plugin rules.",
      "type": "object",
      "properties": {
        "rootDir": {
          "description": "The root directory of the Next.js project.\n\nThis is particularly useful when you have a monorepo and your Next.js project is in a subfolder.\n\n## Example\n\n```json { \"settings\": { \"next\": { \"rootDir\": \"apps/dashboard/\" } } } ```",
          "allOf": [
            {
              "$ref": "#/definitions/OneOrMany_for_String"
            }
          ]
        }
      }
    },
    "OneOrMany_for_String": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "OxlintEnv": {
      "description": "Predefine global variables.",
      "type": "object",
      "additionalProperties": {
        "type": "boolean"
      }
    },
    "OxlintGlobals": {
      "description": "Add or remove global variables.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/GlobalValue"
      }
    },
    "OxlintRules": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/DummyRule"
      }
    },
    "OxlintSettings": {
      "title": "Oxlint Plugin Settings",
      "description": "Configure the behavior of linter plugins.\n\n## Example\n\nHere's an example if you're using Next.js in a monorepo:\n\n```jsonc { \"settings\": { \"next\": { \"rootDir\": \"apps/dashboard/\" }, \"react\": { \"linkComponents\": [ // support next/link { \"name\": \"Link\", \"linkAttribute\": \"to\" } ] }, \"jsx-a11y\": { \"components\": { \"Link\": \"a\", \"Button\": \"button\" } } } } ```",
      "type": "object",
      "properties": {
        "jsdoc": {
          "$ref": "#/definitions/JSDocPluginSettings"
        },
        "jsx-a11y": {
          "$ref": "#/definitions/JSXA11yPluginSettings"
        },
        "next": {
          "$ref": "#/definitions/NextPluginSettings"
        },
        "react": {
          "$ref": "#/definitions/ReactPluginSettings"
        }
      }
    },
    "ReactPluginSettings": {
      "description": "Configure React plugin rules.\n\nDerived from [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react#configuration-legacy-eslintrc-)",
      "type": "object",
      "properties": {
        "formComponents": {
          "description": "Components used as alternatives to `<form>` for forms, such as `<Formik>`.\n\n## Example\n\n```jsonc { \"settings\": { \"react\": { \"formComponents\": [ \"CustomForm\", // OtherForm is considered a form component and has an endpoint attribute { \"name\": \"OtherForm\", \"formAttribute\": \"endpoint\" }, // allows specifying multiple properties if necessary { \"name\": \"Form\", \"formAttribute\": [\"registerEndpoint\", \"loginEndpoint\"] } ] } } } ```",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomComponent"
          }
        },
        "linkComponents": {
          "description": "Components used as alternatives to `<a>` for linking, such as `<Link>`.\n\n## Example\n\n```jsonc { \"settings\": { \"react\": { \"linkComponents\": [ \"HyperLink\", // Use `linkAttribute` for components that use a different prop name // than `href`. { \"name\": \"MyLink\", \"linkAttribute\": \"to\" }, // allows specifying multiple properties if necessary { \"name\": \"Link\", \"linkAttribute\": [\"to\", \"href\"] } ] } } } ```",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomComponent"
          }
        }
      }
    },
    "TagNamePreference": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "message",
            "replacement"
          ],
          "properties": {
            "message": {
              "type": "string"
            },
            "replacement": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "message"
          ],
          "properties": {
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "boolean"
        }
      ]
    }
  }
}